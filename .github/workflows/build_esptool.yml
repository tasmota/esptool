name: Build esptool

on: [push, pull_request]

jobs:
  build-esptool-binaries:
    name: Build esptool binaries for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-latest, windows-latest]
        include:
        - os: macos-10.15
          TARGET: macos
          SEPARATOR: ':'
        - os: ubuntu-latest
          TARGET: linux-amd64
          SEPARATOR: ':'
        - os: windows-latest
          TARGET: win64
          EXTEN: .exe
          SEPARATOR: ';'
    env:
      DISTPATH: esptool-${{ matrix.TARGET }}
      STUBS_DIR: /esptool/targets/stub_flasher/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install --user -e .
      - name: Build with PyInstaller
        run: |
          pyinstaller --distpath ./${{ env.DISTPATH }} -F --icon=build_tools/espressif.ico --add-data=".${{ env.STUBS_DIR }}*.json${{ matrix.SEPARATOR }}${{ env.STUBS_DIR }}" esptool.py
          pyinstaller --distpath ./${{ env.DISTPATH }} -F --icon=build_tools/espressif.ico espefuse.py
          pyinstaller --distpath ./${{ env.DISTPATH }} -F --icon=build_tools/espressif.ico espsecure.py
          pyinstaller --distpath ./${{ env.DISTPATH }} -F --icon=build_tools/espressif.ico esp_rfc2217_server.py
      - name: Test binaries
        shell: bash
        run: |
          ./${{ env.DISTPATH }}/esptool${{ matrix.EXTEN }} -h
          ./${{ env.DISTPATH }}/espefuse${{ matrix.EXTEN }} -h
          ./${{ env.DISTPATH }}/espsecure${{ matrix.EXTEN }} -h
          ./${{ env.DISTPATH }}/esp_rfc2217_server${{ matrix.EXTEN }} -h
      - name: Add license and readme
        shell: bash
        run: mv LICENSE README.md ./${{ env.DISTPATH }}
      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DISTPATH }}
          path: ${{ env.DISTPATH }}

  create_release:
    name: Create GitHub release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-esptool-binaries
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

  upload_assets:
    name: Upload release assets
    if: startsWith(github.ref, 'refs/tags/')
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TARGET: [macos, linux-amd64, win64]
    env:
      DISTPATH: esptool-${{ needs.create_release.outputs.VERSION }}-${{ matrix.TARGET }}
    steps:
      - name: Download built binaries
        uses: actions/download-artifact@v3
      - name: Rename and package binaries
        run: |
          mv esptool-${{ matrix.TARGET }} ${{ env.DISTPATH }}
          zip -r ${{ env.DISTPATH }}.zip ./${{ env.DISTPATH }}/*
      - name: Upload release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: "${{ env.DISTPATH }}.zip"
          asset_name: "${{ env.DISTPATH }}.zip"
          asset_content_type: application/zip
